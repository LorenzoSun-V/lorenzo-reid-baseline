# encoding: utf-8
"""
@author:  lorenzo
@contact: baiyingpoi123@gmail.com
"""
import argparse
import logging
import os
import sys
import torch

from torch.nn.parallel import DistributedDataParallel

sys.path.append('.')
from config.config import get_cfg
from playreid.data import build_reid_train_loader
from playreid.engine.engine import do_train, do_test, auto_scale_hyperparams, default_setup
from playreid.engine.lanuch import launch

from playreid.modeling import build_model
from playreid.utils import comm
from playreid.utils.checkpoint import Checkpointer
from playreid.utils.file_io import PathManager


def default_argument_parser():
    """
    Create a parser with some common arguments used.
    Returns:
        argparse.ArgumentParser:
    """
    parser = argparse.ArgumentParser(description="Lorenzo ReID Baseline Training")
    parser.add_argument("--config-file", default="/workspace/lorenzo/ReID/lorenzo-reid-baseline/configs/CMDM/bagtricks_R50.yml", type=str, help="path to config file")
    parser.add_argument("opts", help="Modify config options using the command-line", default=None, nargs=argparse.REMAINDER)
    return parser

    
def setup(args):
    """
    Create configs and perform basic setups.
    """
    # This function loads default configuration written in ./config/default.py .
    cfg = get_cfg()
    # Merge configs from a given yaml file.
    cfg.merge_from_file(args.config_file)
    # Merge configs from list generated by args.opts
    cfg.merge_from_list(args.opts)  # ['MODEL.DEVICE', 'cuda:0']
    if cfg.MODEL.PRETRAIN == True:
        cfg.MODEL.BACKBONE.PRETRAIN = False
    cfg.freeze()
    default_setup(cfg, args)
    return cfg


def to_onnx(model, onnx_path, H, W):
    data = torch.randn(1, 3, H, W)
    data = data.to(device=torch.device("cuda"), non_blocking=True)
    torch.onnx.export(model, data, onnx_path, verbose=True)
    print( f"**Completed creating onnx path {onnx_path}" )


def main(args):
    cfg = setup(args)
    cfg.defrost()
    cfg.MODEL.BACKBONE.PRETRAIN = False
    
    model = build_model(cfg)

    if cfg.MODEL.TEST_WEIGHTS:
        test_weight = cfg.MODEL.TEST_WEIGHTS
    else:
        test_weight = os.path.join(cfg.OUTPUT_DIR, 'model_best.pth')
    if not PathManager.isfile(test_weight):
        raise RuntimeError(f"No test weight path! Double check your cfg.MODEL.TEST_WEIGHTS!")
    Checkpointer(model).load(test_weight)

    onnx_path = os.path.join(cfg.OUTPUT_DIR, "best_model.onnx")
    to_onnx(model, onnx_path, cfg.INPUT.SIZE_TEST[0], cfg.INPUT.SIZE_TEST[1])


if __name__ == "__main__":
    args = default_argument_parser().parse_args()
    print("Command Line Args:", args)
    main(args)