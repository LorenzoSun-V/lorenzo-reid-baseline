# encoding: utf-8
"""
@author:  lorenzo
@contact: baiyingpoi123@gmail.com
"""
import argparse
import os
import sys
import torch
from pytorch_nndct import get_pruning_runner

sys.path.append('.')
from config.config import get_cfg
from playreid.engine.engine import default_setup
from playreid.modeling import build_model
from playreid.utils.measure_model_sparsity import cal_sparsity, get_parameter_number
from playreid.utils.checkpoint import Checkpointer
from playreid.utils.file_io import find_prune_folder


def default_argument_parser():
    """
    Create a parser with some common arguments used.
    Returns:
        argparse.ArgumentParser:
    """
    parser = argparse.ArgumentParser(description="Lorenzo ReID Baseline Training")
    parser.add_argument("-f", "--config-file", default="/workspace/lorenzo/ReID/lorenzo-reid-baseline/configs/Market1501/bagtricks_R50.yml", type=str, help="path to config file")
    parser.add_argument("-s", "--sparsity", type=float, default=0.5, help="sparsity ratio of model")
    parser.add_argument("-m", "--mode", default="iter", choices=["iter", "nas", "ofa"], help="pruning method")
    parser.add_argument("opts", help="Modify config options using the command-line", default=None, nargs=argparse.REMAINDER)
    return parser


def setup(args):
    """
    Create configs and perform basic setups.
    """
    # This function loads default configuration written in ./config/default.py .
    cfg = get_cfg()
    # Merge configs from a given yaml file.
    cfg.merge_from_file(args.config_file)
    # Merge configs from list generated by args.opts
    cfg.merge_from_list(args.opts)  # ['MODEL.DEVICE', 'cuda:0']
    cfg.MODEL.PRETRAIN = False
    cfg.MODEL.BACKBONE.PRETRAIN = False
    if args.sparsity != 0:
        cfg.OUTPUT_DIR = os.path.join(cfg.OUTPUT_DIR, f'{find_prune_folder(args.mode)}', f'sparsity_{args.sparsity}')
    cfg.freeze()
    default_setup(cfg, args, 'log_cal_sparsity.txt')
    return cfg


def main(args):
    cfg = setup(args)
    if args.sparsity != 0:
        sparse_model_path = os.path.join(cfg.OUTPUT_DIR, f"model_sparsity_{args.sparsity}.pth")
        slim_model_path = os.path.join(cfg.OUTPUT_DIR, f"model_slim_{args.sparsity}.pth")
    else:
        sparse_model_path = slim_model_path = os.path.join(cfg.OUTPUT_DIR, "model_best.pth")
    print(sparse_model_path)
    model = build_model(cfg)
    assert os.path.exists(slim_model_path), "No slim model!"

    # only iterative prune has sparse model
    if args.mode == "iter":
        assert os.path.exists(sparse_model_path), "No sparse model!"
        Checkpointer(model).load(sparse_model_path)
        cal_sparsity(model)

    if args.sparsity != 0:
        input_signature = torch.randn([1, 3, 256, 128], dtype=torch.float32)
        input_signature = input_signature.to(torch.device(cfg.MODEL.DEVICE))
        prune_method = find_prune_folder(args.mode)[:-6]
        pruning_runner = get_pruning_runner(model, input_signature, prune_method)
        if prune_method == "iterative":
            slim_model = pruning_runner.prune(removal_ratio=args.sparsity, mode='slim')
        elif prune_method == "one_step":
            slim_model = pruning_runner.prune(removal_ratio=args.sparsity, mode='slim')
    else:
        slim_model = model

    get_parameter_number(slim_model, cfg.MODEL.DEVICE)


if __name__ == "__main__":
    args = default_argument_parser().parse_args()
    print("Command Line Args:", args)
    main(args)