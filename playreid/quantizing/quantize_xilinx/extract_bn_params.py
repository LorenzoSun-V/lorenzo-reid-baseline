# encoding: utf-8
"""
@author:  lorenzo
@contact: baiyingpoi123@gmail.com
"""
import argparse
import logging
import os
import sys
import torch
sys.path.append('.')
from config.config import get_cfg
from playreid.engine.engine import default_setup
from playreid.utils.checkpoint import Checkpointer
from playreid.utils.file_io import find_prune_folder


def default_argument_parser():
    """
    Create a parser with some common arguments used.
    Returns:
        argparse.ArgumentParser:
    """
    parser = argparse.ArgumentParser(description="Lorenzo ReID Baseline Training")
    parser.add_argument("-f", "--config-file", default="/workspace/lorenzo/ReID/lorenzo-reid-baseline/configs/Market1501/bagtricks_R50.yml", type=str, help="path to config file")
    parser.add_argument("-s", "--sparsity", type=float, default=0.5, help="sparsity ratio of model")
    parser.add_argument("-m", "--mode", default="iter", choices=["iter", "nas", "ofa"], help="pruning method")
    # parser.add_argument("--fast-finetune", action="store_true", help="quantize with fast-finetuning")
    parser.add_argument("opts", help="Modify config options using the command-line", default=None, nargs=argparse.REMAINDER)
    return parser


def setup(args, folder_name):
    """
    Create configs and perform basic setups.
    """
    # This function loads default configuration written in ./config/default.py .
    cfg = get_cfg()
    # Merge configs from a given yaml file.
    cfg.merge_from_file(args.config_file)
    # Merge configs from list generated by args.opts
    cfg.merge_from_list(args.opts)  # ['MODEL.DEVICE', 'cuda:0']
    cfg.MODEL.PRETRAIN = False
    cfg.MODEL.BACKBONE.PRETRAIN = False
    # log_root_dir = cfg.OUTPUT_DIR
    # if args.fast_finetune:
    #     cfg.OUTPUT_DIR = os.path.join(cfg.OUTPUT_DIR, 'quantizing', folder_name, f'sparsity_{args.sparsity}_finetune')
    # else:
    cfg.OUTPUT_DIR = os.path.join(cfg.OUTPUT_DIR, 'QAT', folder_name, f'sparsity_{args.sparsity}')
    cfg.freeze()
    default_setup(cfg, args, 'log_extract_bn.txt')
    return cfg#, log_root_dir


def load_bn_param(weight_path):
    ckpt = torch.load(weight_path, map_location=torch.device("cpu"))
    ckpt_state_dict = ckpt#ckpt.pop('model')
    # print(ckpt_state_dict)
    mean_dict = {}
    var_dict = {}
    weight_dict = {}
    for k in list(ckpt_state_dict.keys()):
        if 'bottleneck' in k:
            if 'mean' in k:
                mean_dict[k] = ckpt_state_dict[k].numpy()
            elif 'var' in k:
                var_dict[k] = ckpt_state_dict[k].numpy()
            elif 'weight' in k:
                weight_dict[k] = ckpt_state_dict[k].numpy()
    print(mean_dict, var_dict, weight_dict)
    return mean_dict, var_dict, weight_dict


def save_bn_param(mean_dict, var_dict, weight_dict, reid_param_path):
    with open(reid_param_path, 'w+') as f:
        fixed_content = ["model {\n", '''   name: "reid"\n''', "   kernel {\n", '''     name: "reid_0"\n''',
        "     mean: 103.53\n", "     mean: 116.28\n", "     mean: 123.675\n", "     scale: 0.017429\n", 
        "     scale: 0.017507\n", "     scale: 0.017124\n   }\n", "   model_type: REID\n", "   reid_param {\n"]
        f.writelines(fixed_content)
        for k in mean_dict:
            for i in mean_dict[k]:
                f.write(f'     bn_means:{i}\n')
        for k in var_dict:
            for i in var_dict[k]:
                f.write(f'     bn_vars:{i}\n')
        for k in weight_dict:
            for i in weight_dict[k]:
                f.write(f'     bn_weights:{i}\n')
        f.write("   }\n}\n")
    print(f'ReID BN params have been save to {reid_param_path}')


def main(args):
    if args.sparsity != 0:
        folder_name = find_prune_folder(args.mode)
    else:
        folder_name = "original_pth"
    cfg = setup(args, folder_name)
    slim_model_path = os.path.join(cfg.OUTPUT_DIR, "deployable.pth")
    # else:
    #     slim_model_path = os.path.join(log_root_dir, "model_best.pth")
    bnparam_txt_path = os.path.join(cfg.OUTPUT_DIR, "reid.prototxt")
    # slim_model_path = "/workspace/lorenzo/ReID/lorenzo-reid-baseline/logs/market1501/bagtricks_R50/QAT/one_step_prune/sparsity_0.5/deployable.pth"
    # bnparam_txt_path = "/workspace/lorenzo/ReID/lorenzo-reid-baseline/logs/market1501/bagtricks_R50/QAT/one_step_prune/sparsity_0.5/deployable.prototxt"
    mean_dict, var_dict, weight_dict = load_bn_param(slim_model_path)
    save_bn_param(mean_dict, var_dict, weight_dict, bnparam_txt_path)


if __name__ == "__main__":
    args = default_argument_parser().parse_args()
    print("Command Line Args:", args)
    main(args)
