# encoding: utf-8
"""
@author:  lorenzo
@contact: baiyingpoi123@gmail.com
"""
import os
import argparse
from pathlib import Path


def default_argument_parser():
    """
    Create a parser with some common arguments used.
    Returns:
        argparse.ArgumentParser:
    """
    parser = argparse.ArgumentParser(description="Lorenzo ReID Baseline Training")
    parser.add_argument("-f", "--config-file", default="./configs/Market1501/bagtricks_R50.yml", type=str, help="path to config file")
    parser.add_argument("-m", "--mode", default="iter", choices=["iter", "nas", "ofa"], help="pruning method")
    parser.add_argument("--num-subnet", type=int, default=200, help="number of subnet to search, only useful in one_step prune")
    parser.add_argument("-s", "--sparsity-ratios", type=float, nargs='+', default=[0.3, 0.4, 0.5, 0.6, 0.7], help="list of sparsity ratios")
    parser.add_argument("-d", "--gpus", type=str, default="0", help="string of gpus, like '0' ")
    parser.add_argument("-b", "--batch-size", type=int, default=2048, help="batch size of train / eval")
    
    return parser


def once_iterative_xilinx(args, index, sparsity_ratio):
    # move .sens file generated by analyse before another analyse
    model_name = os.path.basename(args.config_file).split('.')[0]
    # sens_file_path = Path(f'./.vai/Baseline.sens')
    backup_path = Path(f'./xilinx_iterprune_vai/{model_name}/sparsity_origin_model')
    if not backup_path.exists():
        backup_path.mkdir(parents=True)

    if index == 0:
        last_sparsity = 0
        # 1. analyse
        # only analyse the original model at the first time 
        analyse_sh = f"python3 playreid/pruning/iterative_xilinx/analyse.py \
                        --config-file {args.config_file} \
                        --gpus {args.gpus}"
        os.system(analyse_sh)
    else:
        last_sparsity = args.sparsity_ratios[index-1]

    # 2. retrain sparse model
    retrain_sh = f"python3 playreid/pruning/iterative_xilinx/sparse_model_train.py \
                    --config-file {args.config_file} \
                    --sparsity {sparsity_ratio} \
                    --last-sparsity {last_sparsity} \
                    --num-gpus 2 \
                    SOLVER.BASE_LR 3.5e-5 \
                    SOLVER.MAX_EPOCH 30 \
                    SOLVER.WARMUP_ITERS 0 \
                    TEST.EVAL_PERIOD 1 \
                    TEST.IMS_PER_BATCH {args.batch_size} \
                    SOLVER.STEPS 10,20"
    os.system(retrain_sh)

    # 3. prune
    prune_sh = f"python3 playreid/pruning/iterative_xilinx/prune.py \
                 --config-file {args.config_file} \
                 --sparsity {sparsity_ratio}"
    os.system(prune_sh)

    # 4. compare
    compare_sh = f"python3 playreid/pruning/iterative_xilinx/compare.py \
                    --config-file {args.config_file} \
                    --sparsity {sparsity_ratio}"
    os.system(compare_sh)
    
    # 5. cal real sparsity
    cal_sparsity_sh = f"python3 playreid/pruning/cal_sparsity.py \
                        --config-file {args.config_file} \
                        --sparsity {sparsity_ratio} \
                        --mode iter"
    os.system(cal_sparsity_sh)


def iterative_prune(args):
    for index, sparsity in enumerate(args.sparsity_ratios):
        # once_iterative_reanalyse(config_file, index, i, sparsity_ratios, gpus)
        once_iterative_xilinx(args, index, sparsity)


def once_onestep(args, sparsity_ratio):
    #* In the new API(Vitis AI 2.5), .search file will be named with 'sparsity', so don't need to move files to avoid overwrite the file.
    # 1. search
    search_sh = f"python3 playreid/pruning/one_step_xilinx/search.py \
                  --config-file {args.config_file} \
                  --num-subnet {args.num_subnet} \
                  --sparsity {sparsity_ratio} \
                  --gpus {args.gpus}"
    # os.system(search_sh)

    # 2. retrain slim model
    retrain_sh = f"python3 playreid/pruning/one_step_xilinx/slim_model_train.py \
                   --config-file {args.config_file} \
                   --sparsity {sparsity_ratio} \
                   --num-gpus 1 \
                   SOLVER.BASE_LR 7e-5 \
                   SOLVER.MAX_EPOCH 60 \
                   SOLVER.WARMUP_ITERS 0 \
                   TEST.EVAL_PERIOD 1 \
                   SOLVER.STEPS 25,45 \
                   TEST.IMS_PER_BATCH 256 \
                   SOLVER.IMS_PER_BATCH 256"
    # os.system(retrain_sh)

    # 3. test slim model
    test_sh = f"python3 playreid/pruning/one_step_xilinx/test_slim_model.py \
                --config-file {args.config_file} \
                --sparsity {sparsity_ratio} \
                --num-gpus 1 \
                TEST.IMS_PER_BATCH 256"
    os.system(test_sh)

    # 4. cal real sparsity
    cal_sparsity_sh = f"python3 playreid/pruning/cal_sparsity.py \
                        --config-file {args.config_file} \
                        --sparsity {sparsity_ratio} \
                        --mode nas"
    # os.system(cal_sparsity_sh)
    

def one_step_prune(args):
    for sparsity in args.sparsity_ratios:
        once_onestep(args, sparsity)


if __name__ == "__main__":
    args = default_argument_parser().parse_args()
    if args.mode == "iter":
        iterative_prune(args)
    elif args.mode == "nas":
        one_step_prune(args)
    elif args.mode == "ofa":
        pass
    else:
        raise RuntimeError('''only support mode in ["iter", "nas", "ofa]!!! Please double check --mode in your command.''')
